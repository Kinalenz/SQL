Data types, date format, cleaning data

Practice Problem 1 CAST

SELECT CAST(funding_total_usd AS varchar) AS funding_total_usd_string,
       founded_at_clean::varchar AS founded_at_string
  FROM tutorial.crunchbase_companies_clean_date
        

Practice Problem 2 Data format

SELECT companies.category_code,
       COUNT(CASE WHEN acquisitions.acquired_at_cleaned <= companies.founded_at_clean::timestamp + INTERVAL '3 years' THEN 1 ELSE NULL END) AS within_3_years,
       COUNT(CASE WHEN acquisitions.acquired_at_cleaned <= companies.founded_at_clean::timestamp + INTERVAL '5 years' THEN 1 ELSE NULL END) AS within_5_years,
       COUNT(CASE WHEN acquisitions.acquired_at_cleaned <= companies.founded_at_clean::timestamp + INTERVAL '10 years' THEN 1 ELSE NULL END) AS within_10_years,
       COUNT(1) AS total
  FROM tutorial.crunchbase_companies_clean_date companies
  JOIN tutorial.crunchbase_acquisitions_clean_date acquisitions 
    ON companies.permalink = acquisitions.company_permalink 
WHERE founded_at_clean IS NOT NULL
GROUP BY 1
ORDER BY 5 DESC
 

/* Write a query that counts the number of companies acquired within
3 years, 5 years, and 10 years of being founded (in 3 separate columns). 
Include a column for total companies acquired as well. 
Group by category and limit to only rows with a founding date. */


Practice Problem 3 LEFT RIGHT TRIM STRPOS

SELECT  location,
        LENGTH(location) AS length_location,
        STRPOS(location, ',') AS possition_of_comma,
        
        TRIM(both ',()-' FROM LEFT(location, STRPOS(location, ',')-1)) AS latitude,
        TRIM(both ',()-' FROM RIGHT(location, LENGTH(location) - STRPOS(location, ','))) AS longitude_ok
  FROM tutorial.sf_crime_incidents_2014_01
  
  
  /* Write a query that separates the `location` field 
  into separate fields for latitude and longitude. 
  You can compare your results against the actual `lat` and `lon` fields in the table. */


Practice Problem 4 CONCAT

SELECT location, 
      CONCAT('(', lat, ', ', lon, ')') AS lat_lon
  FROM tutorial.sf_crime_incidents_2014_01

/* Concatenate the lat and lon fields to form a field 
that is equivalent to the location field. 
(Note that the answer will have a different decimal precision.) */


Practice Problem 5 ||

SELECT location, 
       '(' || lat || ', ' || lon || ')' AS lat_lon
  FROM tutorial.sf_crime_incidents_2014_01


Practice Problem 6 II

SELECT  date,
        SUBSTR(date,7,4) || '-' || LEFT(date,2) || '-' || SUBSTR(date,4,2) AS clean_date

  FROM tutorial.sf_crime_incidents_2014_01

/* Write a query that creates a date column formatted YYYY-MM-DD. */


Practice Problem 7 UPPER LOWER

SELECT  category,
        UPPER(LEFT(category, 1)) || LOWER( SUBSTR(category,2, LENGTH(category) -1)) AS new_category
        
        
  FROM tutorial.sf_crime_incidents_2014_01
  
  
  /* Write a query that returns the `category` field, 
  but with the first letter capitalized 
  and the rest of the letters in lower-case. */


Practice Problem 8

SELECT  date, time,
        (SUBSTR(date,7,4) || '-' || LEFT(date,2) || '-' || SUBSTR(date,4,2) || ' ' || time)::timestamp as clean_date, 
        (SUBSTR(date,7,4) || '-' || LEFT(date,2) || '-' || SUBSTR(date,4,2) || ' ' || time)::timestamp + INTERVAL '1 week' as plus_1week
      
  FROM tutorial.sf_crime_incidents_2014_01


/* Write a query that creates an accurate timestamp 
using the date and time columns in tutorial.sf_crime_incidents_2014_01. 
Include a field that is exactly 1 week later as well. */


Practice Problem 9 DATE_TRUNC

SELECT DATE_TRUNC('week', cleaned_date)::date AS week_beginning,
       COUNT(incidnt_num) AS incidents
       

   FROM tutorial.sf_crime_incidents_cleandate
GROUP BY 1
ORDER BY 2 DESC
  
  
  /* Write a query that counts the number of incidents reported by week. 
  Cast the week as a date to get rid of the hours/minutes/seconds. */


Practice Problem 10 NOW()

SELECT incidnt_num, 
       cleaned_date, 
       NOW() AT TIME ZONE 'PST' AS now,
       NOW() AT TIME ZONE 'PST' - cleaned_date AS time_ago

  FROM tutorial.sf_crime_incidents_cleandate

/* Write a query that shows exactly how long ago each indicent was reported. 
Assume that the dataset is in Pacific Standard Time (UTC - 8). */

