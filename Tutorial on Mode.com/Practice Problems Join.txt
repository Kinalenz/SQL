â€¢	SQL Join

Practice Problem 1 Join

SELECT players.school_name,
       players.player_name,
       players.position,
       players.weight
  FROM benn.college_football_players players
 WHERE players.state = 'GA'
 ORDER BY players.weight DESC
 
 /* Write a query that selects the school name, player name, 
 position, and weight for every player in Georgia, ordered by weight (heaviest to lightest). 
 Be sure to make an alias for the table, and to reference all column names in relation to the alias. *


Practice Problem 2 Join

SELECT players.player_name,
       teams.school_name,
       teams.conference
  FROM benn.college_football_players players
  JOIN benn.college_football_teams teams
    ON teams.school_name = players.school_name
  WHERE division LIKE 'FBS (Division I-A Teams)'
    
    
    /* Write a query that displays player names, school names and conferences 
    for schools in the "FBS (Division I-A Teams)" division. */


Practice Problem 3 Join

SELECT COUNT(companies.permalink) as count_companies,
       COUNT(acquisitions.company_permalink) as count_acquisitions
 FROM tutorial.crunchbase_companies companies
 JOIN tutorial.crunchbase_acquisitions acquisitions
    ON companies.permalink = acquisitions.company_permalink
    
    /* Write a query that performs an inner join between the tutorial.crunchbase_acquisitions table 
    and the tutorial.crunchbase_companies table, 
    but instead of listing individual rows, 
    count the number of non-null rows in each table. */


Practice Problem 4 Join

SELECT COUNT(companies.permalink) as count_companies,
       COUNT(acquisitions.company_permalink) as count_acquisitions
 FROM tutorial.crunchbase_companies companies
 LEFT JOIN tutorial.crunchbase_acquisitions acquisitions
    ON companies.permalink = acquisitions.company_permalink
    
    /* Modify the query above to be a LEFT JOIN. Note the difference in results. */

Practice Problem 5 LEFT Join

SELECT      companies.state_code,
            COUNT (DISTINCT companies.permalink) AS count_companies,
            COUNT (DISTINCT acquisitions.company_permalink) AS count_acquisitions

    FROM tutorial.crunchbase_companies companies
      LEFT JOIN tutorial.crunchbase_acquisitions acquisitions
      ON companies.permalink = acquisitions.company_permalink
WHERE companies.state_code IS NOT NULL
GROUP BY companies.state_code 
ORDER BY 3 DESC


/* Count the number of unique companies (don't double-count companies) and unique acquired companies by state. 
Do not include results for which there is no state data, 
and order by the number of acquired companies from highest to lowest. */


Practice Problem 6 RIGHT Join

SELECT      companies.state_code,
            COUNT (DISTINCT companies.permalink) AS count_companies,
            COUNT (DISTINCT acquisitions.company_permalink) AS count_acquisitions

    FROM tutorial.crunchbase_acquisitions acquisitions
      RIGHT JOIN tutorial.crunchbase_companies companies
      ON companies.permalink = acquisitions.company_permalink
WHERE companies.state_code IS NOT NULL
GROUP BY companies.state_code 
ORDER BY 3 DESC

    /* Rewrite the previous practice query in which you counted total and acquired companies by state, 
    but with a RIGHT JOIN instead of a LEFT JOIN. The goal is to produce the exact same results. */


Practice Problem 7

SELECT companies.name AS company_name,
       companies.status AS company_status,
       COUNT(DISTINCT investments.investor_name) AS unique_investors
    FROM tutorial.crunchbase_companies companies
    LEFT JOIN tutorial.crunchbase_investments investments
      ON companies.permalink = investments.company_permalink 
  WHERE companies.state_code = 'NY'
  GROUP BY 1,2
  ORDER BY 3 DESC
  


/* company_permalink in the tutorial.crunchbase_investments table maps to permalink in the tutorial.crunchbase_companies */
/* Write a query that shows a company's name, "status" (found in the Companies table), 
and the number of unique investors in that company. 
Order by the number of investors from most to fewest. 
Limit to only companies in the state of New York. */


Practice Problem 8

SELECT CASE WHEN investments.investor_name IS NULL THEN 'No_investor'
            ELSE investments.investor_name END AS investor,
       COUNT(DISTINCT companies.permalink) AS amount_company
FROM tutorial.crunchbase_companies companies
    LEFT JOIN tutorial.crunchbase_investments investments
      ON companies.permalink = investments.company_permalink
GROUP BY 1
ORDER BY 2 DESC


/* Write a query that lists investors based on the number of companies in which they are invested. 
 Include a row for companies with no investor, 
 and order from most companies to least. */  


Practice Problem 9 Full Join

SELECT COUNT(CASE WHEN companies.permalink IS NOT NULL AND investments_1.company_permalink IS NULL 
                  THEN companies.permalink ELSE NULL END) AS companies_only,
       COUNT(CASE WHEN companies.permalink IS NOT NULL AND investments_1.company_permalink IS NOT NULL 
                  THEN companies.permalink ELSE NULL END) AS both,
       COUNT(CASE WHEN companies.permalink IS NULL AND investments_1.company_permalink IS NOT NULL 
                  THEN investments_1.company_permalink ELSE NULL END) AS invest_only
    FROM tutorial.crunchbase_companies companies
    FULL JOIN tutorial.crunchbase_investments_part1 investments_1
      ON companies.permalink = investments_1.company_permalink

/* Write a query that joins tutorial.crunchbase_companies and tutorial.crunchbase_investments_part1 using a FULL JOIN. 
Count up the number of rows that are matched/unmatched as in the example above. */


Practice Problem 10 UNION ALL

SELECT company_permalink, company_name, investor_name
    FROM tutorial.crunchbase_investments_part1 
    WHERE company_name ILIKE 'T%'
    
UNION ALL

SELECT company_permalink, company_name, investor_name
    FROM tutorial.crunchbase_investments_part2
    WHERE company_name ILIKE 'M%'

/* Write a query that appends the two crunchbase_investments datasets above (including duplicate values). 
Filter the first dataset to only companies with names that start with the letter "T", 
and filter the second to companies with names starting with "M" (both not case-sensitive). 
Only include the company_permalink, company_name, and investor_name columns. */


Practice Problem 11 UNION ALL 

SELECT 'investments_part1' AS dataset_name,
        companies.status,
        COUNT(DISTINCT investments.company_permalink) AS investors
    FROM tutorial.crunchbase_companies companies
    LEFT JOIN tutorial.crunchbase_investments_part1 investments
      ON companies.permalink = investments.company_permalink
    GROUP BY 1,2
    
UNION ALL

SELECT 'investments_part2' AS dataset_name,
        companies.status,
        COUNT(DISTINCT investments.company_permalink) AS investors
    FROM tutorial.crunchbase_companies companies
    LEFT JOIN tutorial.crunchbase_investments_part2 investments
      ON companies.permalink = investments.company_permalink
    GROUP BY 1,2
    
    
/* Write a query that shows 3 columns. 
The first indicates which dataset (part 1 or 2) the data comes from, 
the second shows company status, and the third is a count of the number of investors.
Hint: you will have to use the tutorial.crunchbase_companies table as well as the investments tables. 
And you'll want to group by status and dataset. */

